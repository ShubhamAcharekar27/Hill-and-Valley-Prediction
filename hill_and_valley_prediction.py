# -*- coding: utf-8 -*-
"""Hill and Valley Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19c2bqrwftyo84PVjagUA1zZAZNmx02ef

# **Hill and Valley Prediciton with Logistic Regression**

-------------

## **Objective**

This project's objectiveÂ is to create a logistic regression predictive model that can correctly categorise certain geographic locations as either hills or valleys based on a set of input features. The model's performance will be assessed using a different test dataset after it has been trained on a labelled dataset of geographical features and their corresponding classifications. This project's ultimate objective is to develop a helpful tool for locating hills and valleys in diverse geographic regions, which can be beneficial in areas like geology, agriculture, and urban planning.

## **Data Source**

Github Repository Link of YBI Foundation

## **Import Library**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import confusion_matrix, accuracy_score, classification_report

"""## **Import Data**"""

data=pd.read_csv('https://github.com/YBIFoundation/Dataset/raw/main/Hill%20Valley%20Dataset.csv')

"""## **Describe Data**"""

data.head()

data.tail()

data.dtypes

data.info()

data.describe

data.shape

"""## **Data Preprocessing**"""

data['Class'].value_counts()

data.groupby('Class').mean()

"""## **Define Target Variable (y) and Feature Variables (X)**"""

y=data['Class']

X=data.drop(['Class'],axis=1)

X.shape

"""## **Data Visualization**"""

plt.plot(X.iloc[0,:])
plt.title('Valley')

plt.plot(X.iloc[1,:])
plt.title=('Hill')

"""**Standardize X variables**"""

ss=StandardScaler()

X = ss.fit_transform(X)

"""## **Train Test Split**"""

X_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.3, stratify = y, random_state=2529)

X_train.shape, X_test.shape, y_train.shape, y_test.shape

X_train

"""## **Modeling**"""

lr=LogisticRegression()

lr.fit(X_train,y_train)

lr.coef_

y_predict=lr.predict(X_test)

y_predict.shape

"""## **Model Evaluation**"""

print(confusion_matrix(y_test,y_predict))

print(classification_report(y_test,y_predict))

"""## **Prediction**"""

y_test

y_predict

accuracy_score(y_test,y_predict)